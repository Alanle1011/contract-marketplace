{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__FeesTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NoProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotApproveForMarketPlace",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotNftOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__PriceMustBeAboveZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__PriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketPlace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c41c0a4100bbaff1efb354bda9414de61e4ed707ab169a0a66a6e4a536b42d2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1501642",
    "logsBloom": "0x
    "blockHash": "0xf1a2b5dfa40af334be3a21338f6e8ebc02950721f52242dca20984e5bfb12191",
    "transactionHash": "0x5c41c0a4100bbaff1efb354bda9414de61e4ed707ab169a0a66a6e4a536b42d2",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1501642",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5
  ],
  "numDeployments": 1,
  "solcInputHash": "3898b3a0e4c136d415e58b4662043a7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__FeesTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NoProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotApproveForMarketPlace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotNftOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__PriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketPlace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"listItem(address,uint256,uint256)\":{\"details\":\"Tecnically, we could have the contract be the escrow for the NFTs but this way people can still hold their NFTs when listed.\",\"params\":{\"nftAddress\":\": Address of th NFT\",\"price\":\": sale price of the listed NFT\",\"tokenId\":\": The TokenID of the NFT\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"listItem(address,uint256,uint256)\":{\"notice\":\"Method for listing your NFT on the marketplace\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketPlace.sol\":\"NftMarketPlace\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror NftMarketPlace__PriceMustBeAboveZero();\\r\\nerror NftMarketPlace__NotApproveForMarketPlace();\\r\\nerror NftMarketPlace__AlreadyListed(address nftAddress, uint256 tokenId);\\r\\nerror NftMarketPlace__NotListed(address nftAddress, uint256 tokenId);\\r\\nerror NftMarketPlace__NotNftOwner();\\r\\nerror NftMarketPlace__PriceNotMet(\\r\\n  address nftAddress,\\r\\n  uint256 tokenId,\\r\\n  uint256 price\\r\\n);\\r\\nerror NftMarketPlace__NoProceeds();\\r\\nerror NftMarketPlace__TransferFailed();\\r\\nerror NftMarketPlace__FeesTransferFailed();\\r\\n\\r\\ncontract NftMarketPlace is ReentrancyGuard {\\r\\n  struct Listing {\\r\\n    uint256 price;\\r\\n    address seller;\\r\\n  }\\r\\n\\r\\n  event ItemListed(\\r\\n    address indexed seller,\\r\\n    address indexed nftAddress,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 price\\r\\n  );\\r\\n  event ItemBought(\\r\\n    address indexed buyer,\\r\\n    address indexed nftAddress,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 price\\r\\n  );\\r\\n  event ItemCanceled(\\r\\n    address indexed seller,\\r\\n    address indexed nftAddress,\\r\\n    uint256 tokenId\\r\\n  );\\r\\n\\r\\n  address public owner;\\r\\n  uint256 public withdrawFees;\\r\\n\\r\\n  // NFT COntract address -> NFT TokenIID -> listing\\r\\n  mapping(address => mapping(uint256 => Listing)) s_listings;\\r\\n\\r\\n  //Seller address -> amount earned\\r\\n  mapping(address => uint256) private s_proceeds;\\r\\n\\r\\n  //////////////////\\r\\n  // Construtors  //\\r\\n  //////////////////\\r\\n  constructor(uint256 _withdrawFees) {\\r\\n    owner = msg.sender;\\r\\n    withdrawFees = _withdrawFees;\\r\\n  }\\r\\n\\r\\n  //////////////////\\r\\n  // Modifiers    //\\r\\n  //////////////////\\r\\n  modifier notListed(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    address nftOwner\\r\\n  ) {\\r\\n    Listing memory listing = s_listings[nftAddress][tokenId];\\r\\n\\r\\n    if (listing.price > 0) {\\r\\n      revert NftMarketPlace__AlreadyListed(nftAddress, tokenId);\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n  modifier isListed(address nftAddress, uint256 tokenId) {\\r\\n    Listing memory listing = s_listings[nftAddress][tokenId];\\r\\n    if (listing.price <= 0) {\\r\\n      revert NftMarketPlace__NotListed(nftAddress, tokenId);\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isNftOwner(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    address spender\\r\\n  ) {\\r\\n    IERC721 nft = IERC721(nftAddress);\\r\\n    address nftOwner = nft.ownerOf(tokenId);\\r\\n    if (spender != nftOwner) {\\r\\n      revert NftMarketPlace__NotNftOwner();\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  //////////////////\\r\\n  // Main function//\\r\\n  //////////////////\\r\\n\\r\\n  /**\\r\\n   * @notice Method for listing your NFT on the marketplace\\r\\n   * @param nftAddress: Address of th NFT\\r\\n   * @param tokenId : The TokenID of the NFT\\r\\n   * @param price : sale price of the listed NFT\\r\\n   * @dev Tecnically, we could have the contract be the escrow for the NFTs but this way people can still hold their NFTs when listed.\\r\\n   */\\r\\n  function listItem(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    uint256 price\\r\\n  )\\r\\n    external\\r\\n    notListed(nftAddress, tokenId, msg.sender)\\r\\n    isNftOwner(nftAddress, tokenId, msg.sender)\\r\\n  {\\r\\n    if (price <= 0) {\\r\\n      revert NftMarketPlace__PriceMustBeAboveZero();\\r\\n    }\\r\\n    IERC721 nft = IERC721(nftAddress);\\r\\n    if (nft.getApproved(tokenId) != address(this)) {\\r\\n      revert NftMarketPlace__NotApproveForMarketPlace();\\r\\n    }\\r\\n    s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\\r\\n    emit ItemListed(msg.sender, nftAddress, tokenId, price);\\r\\n  }\\r\\n\\r\\n  function buyItem(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId\\r\\n  ) external payable nonReentrant isListed(nftAddress, tokenId) {\\r\\n    Listing memory listedItem = s_listings[nftAddress][tokenId];\\r\\n    if (msg.value < listedItem.price) {\\r\\n      revert NftMarketPlace__PriceNotMet(nftAddress, tokenId, listedItem.price);\\r\\n    }\\r\\n    s_proceeds[listedItem.seller] = s_proceeds[listedItem.seller] + msg.value;\\r\\n\\r\\n    delete (s_listings[nftAddress][tokenId]);\\r\\n    IERC721(nftAddress).safeTransferFrom(\\r\\n      listedItem.seller,\\r\\n      msg.sender,\\r\\n      tokenId\\r\\n    );\\r\\n    emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\\r\\n  }\\r\\n\\r\\n  function cancelListing(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId\\r\\n  )\\r\\n    external\\r\\n    isNftOwner(nftAddress, tokenId, msg.sender)\\r\\n    isListed(nftAddress, tokenId)\\r\\n  {\\r\\n    delete (s_listings[nftAddress][tokenId]);\\r\\n    emit ItemCanceled(msg.sender, nftAddress, tokenId);\\r\\n  }\\r\\n\\r\\n  function updateListing(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    uint256 newPrice\\r\\n  )\\r\\n    external\\r\\n    isNftOwner(nftAddress, tokenId, msg.sender)\\r\\n    isListed(nftAddress, tokenId)\\r\\n  {\\r\\n    if (newPrice <= 0) {\\r\\n      revert NftMarketPlace__PriceMustBeAboveZero();\\r\\n    }\\r\\n    s_listings[nftAddress][tokenId].price = newPrice;\\r\\n\\r\\n    emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\\r\\n  }\\r\\n\\r\\n  function withdrawProceeds() external payable nonReentrant {\\r\\n    uint256 proceeds = s_proceeds[msg.sender];\\r\\n    if (proceeds <= 0) {\\r\\n      revert NftMarketPlace__NoProceeds();\\r\\n    }\\r\\n    s_proceeds[msg.sender] = 0;\\r\\n\\r\\n    uint256 feesAmount = proceeds * withdrawFees / 100;\\r\\n    uint256 withdrawAmount = proceeds - feesAmount;\\r\\n\\r\\n    // Send fees to the Owner\\r\\n    (bool feeSucces, ) = payable(owner).call{ value: feesAmount }(\\\"\\\");\\r\\n    if (!feeSucces) {\\r\\n      revert NftMarketPlace__FeesTransferFailed();\\r\\n    }\\r\\n\\r\\n    // Send money to the User\\r\\n    (bool success, ) = payable(msg.sender).call{ value: withdrawAmount }(\\\"\\\");\\r\\n    if (!success) {\\r\\n      revert NftMarketPlace__TransferFailed();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /////////////////////\\r\\n  // Getter function //\\r\\n  /////////////////////\\r\\n\\r\\n  function getListing(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId\\r\\n  ) external view returns (Listing memory) {\\r\\n    return s_listings[nftAddress][tokenId];\\r\\n  }\\r\\n\\r\\n  function getProceeds(address seller) external view returns (uint256) {\\r\\n    return s_proceeds[seller];\\r\\n  }\\r\\n}\\r\\n\\r\\n//    1. `listItem`: List NFTs on the marketplace\\r\\n//    2. `buyItem`: Buy the NFTs\\r\\n//    3. `cacelItem`: Cancel a listing\\r\\n//    4. `updateListing`: Update price\\r\\n//    5. `widthrawProceeds`: Withdraw payment for my bought NFTs\\r\\n\",\"keccak256\":\"0xe4c9a6c3a0cd5bfb6bda2f856eb6873ca517f64ca1ea8048fc60367359ca27ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801562000010575f80fd5b5060405162001a0538038062001a058339818101604052810190620000369190620000c7565b60015f819055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555050620000f7565b5f80fd5b5f819050919050565b620000a3816200008f565b8114620000ae575f80fd5b50565b5f81519050620000c18162000098565b92915050565b5f60208284031215620000df57620000de6200008b565b5b5f620000ee84828501620000b1565b91505092915050565b61190080620001055f395ff3fe608060405260043610610085575f3560e01c80638da5cb5b116100585780638da5cb5b146101535780639038e6931461017d5780639f37092a14610187578063b2ddee06146101a3578063f772adf1146101cb57610085565b806330cfeda914610089578063476343ee146100c557806388700d1c146100ef57806389bfd38f1461012b575b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa9190611470565b6101f3565b6040516100bc91906114b3565b60405180910390f35b3480156100d0575f80fd5b506100d9610239565b6040516100e691906114b3565b60405180910390f35b3480156100fa575f80fd5b50610115600480360381019061011091906114f6565b61023f565b604051610122919061157f565b60405180910390f35b348015610136575f80fd5b50610151600480360381019061014c9190611598565b610304565b005b34801561015e575f80fd5b50610167610746565b60405161017491906115f7565b60405180910390f35b61018561076b565b005b6101a1600480360381019061019c91906114f6565b6109c9565b005b3480156101ae575f80fd5b506101c960048036038101906101c491906114f6565b610dcf565b005b3480156101d6575f80fd5b506101f160048036038101906101ec9190611598565b6110a5565b005b5f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60025481565b6102476113e4565b60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b8282335f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f015111156104095783836040517ffa1d424f000000000000000000000000000000000000000000000000000000008152600401610400929190611610565b60405180910390fd5b8686335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161044a91906114b3565b602060405180830381865afa158015610465573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610489919061164b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146104f0576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8a11610529576040517f01e6e2e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8c90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8e6040518263ffffffff1660e01b815260040161057d91906114b3565b602060405180830381865afa158015610598573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105bc919061164b565b73ffffffffffffffffffffffffffffffffffffffff1614610609576040517fc845ea0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff1681525060035f8f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8e81526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508b8d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48e60405161072f91906114b3565b60405180910390a450505050505050505050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61077361138e565b5f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f81116107ed576040517faaefe00600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f60646002548361084091906116a3565b61084a9190611711565b90505f81836108599190611741565b90505f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16836040516108a1906117a1565b5f6040518083038185875af1925050503d805f81146108db576040519150601f19603f3d011682016040523d82523d5f602084013e6108e0565b606091505b505090508061091b576040517f6d4f33ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f3373ffffffffffffffffffffffffffffffffffffffff1683604051610940906117a1565b5f6040518083038185875af1925050503d805f811461097a576040519150601f19603f3d011682016040523d82523d5f602084013e61097f565b606091505b50509050806109ba576040517fcf0afe3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050506109c76113db565b565b6109d161138e565b81815f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f015111610ad45782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401610acb929190611610565b60405180910390fd5b5f60035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050805f0151341015610bdb578585825f01516040517f2425ddb3000000000000000000000000000000000000000000000000000000008152600401610bd2939291906117b5565b60405180910390fd5b3460045f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610c2891906117ea565b60045f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555060035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133886040518463ffffffff1660e01b8152600401610d299392919061181d565b5f604051808303815f87803b158015610d40575f80fd5b505af1158015610d52573d5f803e3d5ffd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac187845f0151604051610db791906114b3565b60405180910390a450505050610dcb6113db565b5050565b8181335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610e1091906114b3565b602060405180830381865afa158015610e2b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e4f919061164b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610eb6576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86865f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f015111610fb95782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401610fb0929190611610565b60405180910390fd5b60035f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231588b60405161109191906114b3565b60405180910390a350505050505050505050565b8282335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016110e691906114b3565b602060405180830381865afa158015611101573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611125919061164b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461118c576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87875f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f01511161128f5782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401611286929190611610565b60405180910390fd5b5f89116112c8576040517f01e6e2e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8860035f8d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8c81526020019081526020015f205f0181905550898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48c60405161137991906114b3565b60405180910390a45050505050505050505050565b60025f54036113d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c9906118ac565b60405180910390fd5b60025f81905550565b60015f81905550565b60405180604001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61143f82611416565b9050919050565b61144f81611435565b8114611459575f80fd5b50565b5f8135905061146a81611446565b92915050565b5f6020828403121561148557611484611412565b5b5f6114928482850161145c565b91505092915050565b5f819050919050565b6114ad8161149b565b82525050565b5f6020820190506114c65f8301846114a4565b92915050565b6114d58161149b565b81146114df575f80fd5b50565b5f813590506114f0816114cc565b92915050565b5f806040838503121561150c5761150b611412565b5b5f6115198582860161145c565b925050602061152a858286016114e2565b9150509250929050565b61153d8161149b565b82525050565b61154c81611435565b82525050565b604082015f8201516115665f850182611534565b5060208201516115796020850182611543565b50505050565b5f6040820190506115925f830184611552565b92915050565b5f805f606084860312156115af576115ae611412565b5b5f6115bc8682870161145c565b93505060206115cd868287016114e2565b92505060406115de868287016114e2565b9150509250925092565b6115f181611435565b82525050565b5f60208201905061160a5f8301846115e8565b92915050565b5f6040820190506116235f8301856115e8565b61163060208301846114a4565b9392505050565b5f8151905061164581611446565b92915050565b5f602082840312156116605761165f611412565b5b5f61166d84828501611637565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6116ad8261149b565b91506116b88361149b565b92508282026116c68161149b565b915082820484148315176116dd576116dc611676565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61171b8261149b565b91506117268361149b565b925082611736576117356116e4565b5b828204905092915050565b5f61174b8261149b565b91506117568361149b565b925082820390508181111561176e5761176d611676565b5b92915050565b5f81905092915050565b50565b5f61178c5f83611774565b91506117978261177e565b5f82019050919050565b5f6117ab82611781565b9150819050919050565b5f6060820190506117c85f8301866115e8565b6117d560208301856114a4565b6117e260408301846114a4565b949350505050565b5f6117f48261149b565b91506117ff8361149b565b925082820190508082111561181757611816611676565b5b92915050565b5f6060820190506118305f8301866115e8565b61183d60208301856115e8565b61184a60408301846114a4565b949350505050565b5f82825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f611896601f83611852565b91506118a182611862565b602082019050919050565b5f6020820190508181035f8301526118c38161188a565b905091905056fea2646970667358221220fede095e31f1e6e2cff780b8d227e62c1ad9555394b5bc9822f3506197840e7864736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610610085575f3560e01c80638da5cb5b116100585780638da5cb5b146101535780639038e6931461017d5780639f37092a14610187578063b2ddee06146101a3578063f772adf1146101cb57610085565b806330cfeda914610089578063476343ee146100c557806388700d1c146100ef57806389bfd38f1461012b575b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa9190611470565b6101f3565b6040516100bc91906114b3565b60405180910390f35b3480156100d0575f80fd5b506100d9610239565b6040516100e691906114b3565b60405180910390f35b3480156100fa575f80fd5b50610115600480360381019061011091906114f6565b61023f565b604051610122919061157f565b60405180910390f35b348015610136575f80fd5b50610151600480360381019061014c9190611598565b610304565b005b34801561015e575f80fd5b50610167610746565b60405161017491906115f7565b60405180910390f35b61018561076b565b005b6101a1600480360381019061019c91906114f6565b6109c9565b005b3480156101ae575f80fd5b506101c960048036038101906101c491906114f6565b610dcf565b005b3480156101d6575f80fd5b506101f160048036038101906101ec9190611598565b6110a5565b005b5f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60025481565b6102476113e4565b60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b8282335f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f015111156104095783836040517ffa1d424f000000000000000000000000000000000000000000000000000000008152600401610400929190611610565b60405180910390fd5b8686335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161044a91906114b3565b602060405180830381865afa158015610465573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610489919061164b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146104f0576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8a11610529576040517f01e6e2e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8c90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8e6040518263ffffffff1660e01b815260040161057d91906114b3565b602060405180830381865afa158015610598573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105bc919061164b565b73ffffffffffffffffffffffffffffffffffffffff1614610609576040517fc845ea0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff1681525060035f8f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8e81526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508b8d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48e60405161072f91906114b3565b60405180910390a450505050505050505050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61077361138e565b5f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f81116107ed576040517faaefe00600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f60646002548361084091906116a3565b61084a9190611711565b90505f81836108599190611741565b90505f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16836040516108a1906117a1565b5f6040518083038185875af1925050503d805f81146108db576040519150601f19603f3d011682016040523d82523d5f602084013e6108e0565b606091505b505090508061091b576040517f6d4f33ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f3373ffffffffffffffffffffffffffffffffffffffff1683604051610940906117a1565b5f6040518083038185875af1925050503d805f811461097a576040519150601f19603f3d011682016040523d82523d5f602084013e61097f565b606091505b50509050806109ba576040517fcf0afe3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050506109c76113db565b565b6109d161138e565b81815f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f015111610ad45782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401610acb929190611610565b60405180910390fd5b5f60035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050805f0151341015610bdb578585825f01516040517f2425ddb3000000000000000000000000000000000000000000000000000000008152600401610bd2939291906117b5565b60405180910390fd5b3460045f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054610c2891906117ea565b60045f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555060035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133886040518463ffffffff1660e01b8152600401610d299392919061181d565b5f604051808303815f87803b158015610d40575f80fd5b505af1158015610d52573d5f803e3d5ffd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac187845f0151604051610db791906114b3565b60405180910390a450505050610dcb6113db565b5050565b8181335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610e1091906114b3565b602060405180830381865afa158015610e2b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e4f919061164b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610eb6576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86865f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f015111610fb95782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401610fb0929190611610565b60405180910390fd5b60035f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231588b60405161109191906114b3565b60405180910390a350505050505050505050565b8282335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016110e691906114b3565b602060405180830381865afa158015611101573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611125919061164b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461118c576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87875f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f01511161128f5782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401611286929190611610565b60405180910390fd5b5f89116112c8576040517f01e6e2e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8860035f8d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8c81526020019081526020015f205f0181905550898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48c60405161137991906114b3565b60405180910390a45050505050505050505050565b60025f54036113d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c9906118ac565b60405180910390fd5b60025f81905550565b60015f81905550565b60405180604001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61143f82611416565b9050919050565b61144f81611435565b8114611459575f80fd5b50565b5f8135905061146a81611446565b92915050565b5f6020828403121561148557611484611412565b5b5f6114928482850161145c565b91505092915050565b5f819050919050565b6114ad8161149b565b82525050565b5f6020820190506114c65f8301846114a4565b92915050565b6114d58161149b565b81146114df575f80fd5b50565b5f813590506114f0816114cc565b92915050565b5f806040838503121561150c5761150b611412565b5b5f6115198582860161145c565b925050602061152a858286016114e2565b9150509250929050565b61153d8161149b565b82525050565b61154c81611435565b82525050565b604082015f8201516115665f850182611534565b5060208201516115796020850182611543565b50505050565b5f6040820190506115925f830184611552565b92915050565b5f805f606084860312156115af576115ae611412565b5b5f6115bc8682870161145c565b93505060206115cd868287016114e2565b92505060406115de868287016114e2565b9150509250925092565b6115f181611435565b82525050565b5f60208201905061160a5f8301846115e8565b92915050565b5f6040820190506116235f8301856115e8565b61163060208301846114a4565b9392505050565b5f8151905061164581611446565b92915050565b5f602082840312156116605761165f611412565b5b5f61166d84828501611637565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6116ad8261149b565b91506116b88361149b565b92508282026116c68161149b565b915082820484148315176116dd576116dc611676565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61171b8261149b565b91506117268361149b565b925082611736576117356116e4565b5b828204905092915050565b5f61174b8261149b565b91506117568361149b565b925082820390508181111561176e5761176d611676565b5b92915050565b5f81905092915050565b50565b5f61178c5f83611774565b91506117978261177e565b5f82019050919050565b5f6117ab82611781565b9150819050919050565b5f6060820190506117c85f8301866115e8565b6117d560208301856114a4565b6117e260408301846114a4565b949350505050565b5f6117f48261149b565b91506117ff8361149b565b925082820190508082111561181757611816611676565b5b92915050565b5f6060820190506118305f8301866115e8565b61183d60208301856115e8565b61184a60408301846114a4565b949350505050565b5f82825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f611896601f83611852565b91506118a182611862565b602082019050919050565b5f6020820190508181035f8301526118c38161188a565b905091905056fea2646970667358221220fede095e31f1e6e2cff780b8d227e62c1ad9555394b5bc9822f3506197840e7864736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "listItem(address,uint256,uint256)": {
        "details": "Tecnically, we could have the contract be the escrow for the NFTs but this way people can still hold their NFTs when listed.",
        "params": {
          "nftAddress": ": Address of th NFT",
          "price": ": sale price of the listed NFT",
          "tokenId": ": The TokenID of the NFT"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "listItem(address,uint256,uint256)": {
        "notice": "Method for listing your NFT on the marketplace"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 38,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3005,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3007,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "withdrawFees",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3014,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "s_listings",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2975_storage))"
      },
      {
        "astId": 3018,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2975_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketPlace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)2975_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)2975_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketPlace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2975_storage"
      },
      "t_struct(Listing)2975_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketPlace.Listing",
        "members": [
          {
            "astId": 2972,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2974,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}