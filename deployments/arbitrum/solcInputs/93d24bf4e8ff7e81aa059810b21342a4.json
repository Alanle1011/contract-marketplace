{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NftMarketPlace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nerror NftMarketPlace__PriceMustBeAboveZero();\r\nerror NftMarketPlace__NotApproveForMarketPlace();\r\nerror NftMarketPlace__AlreadyListed(address nftAddress, uint256 tokenId);\r\nerror NftMarketPlace__NotListed(address nftAddress, uint256 tokenId);\r\nerror NftMarketPlace__NotNftOwner();\r\nerror NftMarketPlace__PriceNotMet(\r\n  address nftAddress,\r\n  uint256 tokenId,\r\n  uint256 price\r\n);\r\nerror NftMarketPlace__BiddingTimeIsOver();\r\nerror NftMarketPlace__BuyBiddingTimeIsNotMeet(\r\n  address nftAddress, \r\n  uint256 tokenId, \r\n  uint256 startBuyTime,\r\n  uint256 endBuyTime\r\n);\r\nerror NftMarketPlace__NotTheHighestBidder();\r\nerror NftMarketPlace__NotBidding();\r\nerror NftMarketPlace__NoProceeds();\r\nerror NftMarketPlace__TransferFailed();\r\nerror NftMarketPlace__FeesTransferFailed();\r\n\r\ncontract NftMarketPlace is ReentrancyGuard {\r\n  struct Listing {\r\n    uint256 price;\r\n    address seller;\r\n  }\r\n  struct Bidding {\r\n    address seller;\r\n    address buyer;\r\n    uint256 price;\r\n    uint256 startBuyTime;\r\n    uint256 endBuyTime;\r\n  }\r\n\r\n  event ItemListed(\r\n    address indexed seller,\r\n    address indexed nftAddress,\r\n    uint256 indexed tokenId,\r\n    uint256 price\r\n  );\r\n  event BidItemListed(\r\n    address indexed seller,\r\n    address indexed nftAddress,\r\n    uint256 indexed tokenId,\r\n    uint256 price\r\n  );\r\n  event ItemBought(\r\n    address indexed buyer,\r\n    address indexed nftAddress,\r\n    uint256 indexed tokenId,\r\n    uint256 price\r\n  );\r\n  event RaiseBidPrice(\r\n    address indexed buyer,\r\n    address indexed nftAddress,\r\n    uint256 indexed tokenId,\r\n    uint256 startBuyTime,\r\n    uint256 endBuyTime,\r\n    uint256 price\r\n  );\r\n  event ItemCanceled(\r\n    address indexed seller,\r\n    address indexed nftAddress,\r\n    uint256 tokenId\r\n  );\r\n  event BidItemBought(\r\n    address indexed buyyer,\r\n    address indexed nftAddress, \r\n    uint256 tokenId, uint256 price\r\n  );\r\n  \r\n  address public owner;\r\n  uint256 public withdrawFees;\r\n\r\n  // NFT COntract address -> NFT TokenIID -> listing\r\n  mapping(address => mapping(uint256 => Listing)) s_listings;\r\n\r\n  // // NFT address -> NFT TokenIID -> Bidding\r\n  mapping(address => mapping(uint256 => Bidding)) s_biddings;\r\n\r\n  //Seller address -> amount earned\r\n  mapping(address => uint256) private s_proceeds;\r\n\r\n  //////////////////\r\n  // Construtors  //\r\n  //////////////////\r\n  constructor(uint256 _withdrawFees) {\r\n    owner = msg.sender;\r\n    withdrawFees = _withdrawFees;\r\n  }\r\n\r\n  //////////////////\r\n  // Modifiers    //\r\n  //////////////////\r\n  modifier notListed(\r\n    address nftAddress,\r\n    uint256 tokenId,\r\n    address nftOwner\r\n  ) {\r\n    Listing memory listing = s_listings[nftAddress][tokenId];\r\n\r\n    if (listing.price > 0) {\r\n      revert NftMarketPlace__AlreadyListed(nftAddress, tokenId);\r\n    }\r\n    _;\r\n  }\r\n  modifier isListed(address nftAddress, uint256 tokenId) {\r\n    Listing memory listing = s_listings[nftAddress][tokenId];\r\n    if (listing.price <= 0) {\r\n      revert NftMarketPlace__NotListed(nftAddress, tokenId);\r\n    }\r\n    _;\r\n  }\r\n  modifier isBidding(address nftAddress, uint256 tokenId) {\r\n    Bidding memory bidding = s_biddings[nftAddress][tokenId];\r\n    if (bidding.seller == address(0)) {\r\n      revert NftMarketPlace__NotBidding();\r\n    }\r\n    _;\r\n  }\r\n  modifier isNftOwner(\r\n    address nftAddress,\r\n    uint256 tokenId,\r\n    address spender\r\n  ) {\r\n    IERC721 nft = IERC721(nftAddress);\r\n    address nftOwner = nft.ownerOf(tokenId);\r\n    if (spender != nftOwner) {\r\n      revert NftMarketPlace__NotNftOwner();\r\n    }\r\n    _;\r\n  }\r\n\r\n  //////////////////\r\n  // Main function//\r\n  //////////////////\r\n\r\n  /**\r\n   * @notice Method for listing your NFT on the marketplace\r\n   * @param nftAddress: Address of th NFT\r\n   * @param tokenId : The TokenID of the NFT\r\n   * @param price : sale price of the listed NFT\r\n   * @dev Tecnically, we could have the contract be the escrow for the NFTs but this way people can still hold their NFTs when listed.\r\n   */\r\n  function listItem(\r\n    address nftAddress,\r\n    uint256 tokenId,\r\n    uint256 price\r\n  )\r\n    external\r\n    notListed(nftAddress, tokenId, msg.sender)\r\n    isNftOwner(nftAddress, tokenId, msg.sender)\r\n  {\r\n    if (price <= 0) {\r\n      revert NftMarketPlace__PriceMustBeAboveZero();\r\n    }\r\n    IERC721 nft = IERC721(nftAddress);\r\n    if (nft.getApproved(tokenId) != address(this)) {\r\n      revert NftMarketPlace__NotApproveForMarketPlace();\r\n    }\r\n    s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\r\n    emit ItemListed(msg.sender, nftAddress, tokenId, price);\r\n  }\r\n\r\n  function buyItem(\r\n    address nftAddress,\r\n    uint256 tokenId\r\n  ) external payable nonReentrant isListed(nftAddress, tokenId) {\r\n    Listing memory listedItem = s_listings[nftAddress][tokenId];\r\n    if (msg.value < listedItem.price) {\r\n      revert NftMarketPlace__PriceNotMet(nftAddress, tokenId, listedItem.price);\r\n    }\r\n    s_proceeds[listedItem.seller] = s_proceeds[listedItem.seller] + msg.value;\r\n\r\n    delete (s_listings[nftAddress][tokenId]);\r\n    IERC721(nftAddress).safeTransferFrom(\r\n      listedItem.seller,\r\n      msg.sender,\r\n      tokenId\r\n    );\r\n    emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\r\n  }\r\n\r\n  function cancelListing(\r\n    address nftAddress,\r\n    uint256 tokenId\r\n  )\r\n    external\r\n    isNftOwner(nftAddress, tokenId, msg.sender)\r\n    isListed(nftAddress, tokenId)\r\n  {\r\n    delete (s_listings[nftAddress][tokenId]);\r\n    emit ItemCanceled(msg.sender, nftAddress, tokenId);\r\n  }\r\n\r\n  function updateListing(\r\n    address nftAddress,\r\n    uint256 tokenId,\r\n    uint256 newPrice\r\n  )\r\n    external\r\n    isNftOwner(nftAddress, tokenId, msg.sender)\r\n    isListed(nftAddress, tokenId)\r\n  {\r\n    if (newPrice <= 0) {\r\n      revert NftMarketPlace__PriceMustBeAboveZero();\r\n    }\r\n    s_listings[nftAddress][tokenId].price = newPrice;\r\n\r\n    emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\r\n  }\r\n\r\n  function withdrawProceeds() external payable nonReentrant {\r\n    uint256 proceeds = s_proceeds[msg.sender];\r\n    if (proceeds <= 0) {\r\n      revert NftMarketPlace__NoProceeds();\r\n    }\r\n    s_proceeds[msg.sender] = 0;\r\n\r\n    uint256 feesAmount = proceeds * withdrawFees / 100;\r\n    uint256 withdrawAmount = proceeds - feesAmount;\r\n\r\n    // Send fees to the Owner\r\n    (bool feeSucces, ) = payable(owner).call{ value: feesAmount }(\"\");\r\n    if (!feeSucces) {\r\n      revert NftMarketPlace__FeesTransferFailed();\r\n    }\r\n\r\n    // Send money to the User\r\n    (bool success, ) = payable(msg.sender).call{ value: withdrawAmount }(\"\");\r\n    if (!success) {\r\n      revert NftMarketPlace__TransferFailed();\r\n    }\r\n  }\r\n\r\n  function listBiddingItem(\r\n    address nftAddress,\r\n    uint256 tokenId,\r\n    uint256 price\r\n  ) external isNftOwner(nftAddress, tokenId, msg.sender) {\r\n    IERC721 nft = IERC721(nftAddress);\r\n    if (nft.getApproved(tokenId) != address(this)) {\r\n      revert NftMarketPlace__NotApproveForMarketPlace();\r\n    }\r\n    \r\n    s_biddings[nftAddress][tokenId] = Bidding(msg.sender, 0x0000000000000000000000000000000000000000, price, 0, 0);\r\n    emit BidItemListed(msg.sender, nftAddress, tokenId, price);\r\n  }\r\n\r\n  function raiseBidPrice(\r\n    address nftAddress,\r\n    uint256 tokenId,\r\n    uint256 price\r\n  )external payable nonReentrant isBidding(nftAddress, tokenId) {\r\n    Bidding memory biddingItem = s_biddings[nftAddress][tokenId];\r\n    if (price <= biddingItem.price) {\r\n      revert NftMarketPlace__PriceNotMet(nftAddress, tokenId, biddingItem.price);\r\n    }\r\n    if(biddingItem.startBuyTime != 0) {\r\n      if(block.timestamp > biddingItem.startBuyTime &&block.timestamp < biddingItem.endBuyTime ){\r\n        revert NftMarketPlace__BiddingTimeIsOver();\r\n      }\r\n    }\r\n    \r\n    uint256 newStartTime = block.timestamp + 300; // Add 5' the current time\r\n    uint256 newEndTime = newStartTime + 300; // Add 10' the current time\r\n    s_biddings[nftAddress][tokenId] = Bidding(biddingItem.seller, msg.sender, price, newStartTime, newEndTime);\r\n    emit RaiseBidPrice(msg.sender,nftAddress, tokenId, newStartTime, newEndTime, price);\r\n  }\r\n\r\n  function cancelBidding(\r\n    address nftAddress,\r\n    uint256 tokenId\r\n  )\r\n    external\r\n    isNftOwner(nftAddress, tokenId, msg.sender)\r\n    isBidding(nftAddress, tokenId)\r\n  {\r\n    delete (s_biddings[nftAddress][tokenId]);\r\n    emit ItemCanceled(msg.sender, nftAddress, tokenId);\r\n  }\r\n\r\n  function buyBidItem(\r\n    address nftAddress,\r\n    uint256 tokenId\r\n  ) external payable nonReentrant isBidding(nftAddress, tokenId) {\r\n    Bidding memory biddingItem = s_biddings[nftAddress][tokenId];\r\n    if(block.timestamp > biddingItem.endBuyTime || block.timestamp < biddingItem.startBuyTime ){\r\n      revert NftMarketPlace__BuyBiddingTimeIsNotMeet(nftAddress, tokenId, biddingItem.startBuyTime ,biddingItem.endBuyTime);\r\n    }\r\n\r\n    if(biddingItem.buyer != msg.sender){\r\n      revert NftMarketPlace__NotTheHighestBidder();\r\n    }\r\n\r\n    if (msg.value < biddingItem.price) {\r\n      revert NftMarketPlace__PriceNotMet(nftAddress, tokenId, biddingItem.price);\r\n    }\r\n\r\n    s_proceeds[biddingItem.seller] = s_proceeds[biddingItem.seller] + msg.value;\r\n    delete (s_biddings[nftAddress][tokenId]);\r\n    IERC721(nftAddress).safeTransferFrom(\r\n      biddingItem.seller,\r\n      msg.sender,\r\n      tokenId\r\n    );\r\n    emit BidItemBought(msg.sender, nftAddress, tokenId, biddingItem.price);\r\n  }\r\n  /////////////////////\r\n  // Getter function //\r\n  /////////////////////\r\n\r\n  function getListing(\r\n    address nftAddress,\r\n    uint256 tokenId\r\n  ) external view returns (Listing memory) {\r\n    return s_listings[nftAddress][tokenId];\r\n  }\r\n\r\n  function getBidding(\r\n    address nftAddress,\r\n    uint256 tokenId\r\n  ) external view returns (Bidding memory) {\r\n    return s_biddings[nftAddress][tokenId];\r\n  }\r\n\r\n  function getProceeds(address seller) external view returns (uint256) {\r\n    return s_proceeds[seller];\r\n  }\r\n}\r\n\r\n//    1. `listItem`: List NFTs on the marketplace\r\n//    2. `buyItem`: Buy the NFTs\r\n//    3. `cacelItem`: Cancel a listing\r\n//    4. `updateListing`: Update price\r\n//    5. `widthrawProceeds`: Withdraw payment for my bought NFTs\r\n//    6. `listBiddingItem`: List the bidding item\r\n//    7. `raiseBidPrice`: Reaise the price ò the bidding nft\r\n//    8. `cancelBidding`: Owner can cacel the bid item\r\n//    9. `buyBidItem`: After bidding time, hightest bidder can buy the nft"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}