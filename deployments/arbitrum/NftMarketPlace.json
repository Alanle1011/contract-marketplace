{
  "address": "0x5C5A9875834Dfb7dFa0579C24C6FF7495e29bAa1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__BiddingTimeIsOver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBuyTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBuyTime",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__BuyBiddingTimeIsNotMeet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__FeesTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NoProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotApproveForMarketPlace",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotBidding",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotNftOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotTheHighestBidder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__PriceMustBeAboveZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__PriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "BidItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "BidItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBuyTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBuyTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "RaiseBidPrice",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyBidItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelBidding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBidding",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startBuyTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBuyTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct NftMarketPlace.Bidding",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketPlace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listBiddingItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "raiseBidPrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b086645084998a608f74a156985f35976cf4d16e18e73259b6f3eba0e2f9c88",
  "receipt": {
    "to": null,
    "from": "0x8060776FB82701F74ef1486cf9666599f9F9Ed1c",
    "contractAddress": "0x5C5A9875834Dfb7dFa0579C24C6FF7495e29bAa1",
    "transactionIndex": 1,
    "gasUsed": "5333844",
    "logsBloom": "0x
    "blockHash": "0x4b9012a10fca4f862c63208ba24c2349eb66254df889ff8c788c10578f4771f8",
    "transactionHash": "0x8b086645084998a608f74a156985f35976cf4d16e18e73259b6f3eba0e2f9c88",
    "logs": [],
    "blockNumber": 25126151,
    "cumulativeGasUsed": "5333844",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5
  ],
  "numDeployments": 1,
  "solcInputHash": "4245c6944caa5956480e09a8ead9de0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__BiddingTimeIsOver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBuyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBuyTime\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__BuyBiddingTimeIsNotMeet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__FeesTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NoProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotApproveForMarketPlace\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotBidding\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotNftOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotTheHighestBidder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__PriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BidItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BidItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBuyTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBuyTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RaiseBidPrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyBidItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelBidding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBidding\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBuyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBuyTime\",\"type\":\"uint256\"}],\"internalType\":\"struct NftMarketPlace.Bidding\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketPlace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listBiddingItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"raiseBidPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"listItem(address,uint256,uint256)\":{\"details\":\"Tecnically, we could have the contract be the escrow for the NFTs but this way people can still hold their NFTs when listed.\",\"params\":{\"nftAddress\":\": Address of th NFT\",\"price\":\": sale price of the listed NFT\",\"tokenId\":\": The TokenID of the NFT\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"listItem(address,uint256,uint256)\":{\"notice\":\"Method for listing your NFT on the marketplace\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketPlace.sol\":\"NftMarketPlace\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror NftMarketPlace__PriceMustBeAboveZero();\\r\\nerror NftMarketPlace__NotApproveForMarketPlace();\\r\\nerror NftMarketPlace__AlreadyListed(address nftAddress, uint256 tokenId);\\r\\nerror NftMarketPlace__NotListed(address nftAddress, uint256 tokenId);\\r\\nerror NftMarketPlace__NotNftOwner();\\r\\nerror NftMarketPlace__PriceNotMet(\\r\\n  address nftAddress,\\r\\n  uint256 tokenId,\\r\\n  uint256 price\\r\\n);\\r\\nerror NftMarketPlace__BiddingTimeIsOver();\\r\\nerror NftMarketPlace__BuyBiddingTimeIsNotMeet(\\r\\n  address nftAddress, \\r\\n  uint256 tokenId, \\r\\n  uint256 startBuyTime,\\r\\n  uint256 endBuyTime\\r\\n);\\r\\nerror NftMarketPlace__NotTheHighestBidder();\\r\\nerror NftMarketPlace__NotBidding();\\r\\nerror NftMarketPlace__NoProceeds();\\r\\nerror NftMarketPlace__TransferFailed();\\r\\nerror NftMarketPlace__FeesTransferFailed();\\r\\n\\r\\ncontract NftMarketPlace is ReentrancyGuard {\\r\\n  struct Listing {\\r\\n    uint256 price;\\r\\n    address seller;\\r\\n  }\\r\\n  struct Bidding {\\r\\n    address seller;\\r\\n    address buyer;\\r\\n    uint256 price;\\r\\n    uint256 startBuyTime;\\r\\n    uint256 endBuyTime;\\r\\n  }\\r\\n\\r\\n  event ItemListed(\\r\\n    address indexed seller,\\r\\n    address indexed nftAddress,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 price\\r\\n  );\\r\\n  event BidItemListed(\\r\\n    address indexed seller,\\r\\n    address indexed nftAddress,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 price\\r\\n  );\\r\\n  event ItemBought(\\r\\n    address indexed buyer,\\r\\n    address indexed nftAddress,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 price\\r\\n  );\\r\\n  event RaiseBidPrice(\\r\\n    address indexed buyer,\\r\\n    address indexed nftAddress,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 startBuyTime,\\r\\n    uint256 endBuyTime,\\r\\n    uint256 price\\r\\n  );\\r\\n  event ItemCanceled(\\r\\n    address indexed seller,\\r\\n    address indexed nftAddress,\\r\\n    uint256 tokenId\\r\\n  );\\r\\n  event BidItemBought(\\r\\n    address indexed buyyer,\\r\\n    address indexed nftAddress, \\r\\n    uint256 tokenId, uint256 price\\r\\n  );\\r\\n  \\r\\n  address public owner;\\r\\n  uint256 public withdrawFees;\\r\\n\\r\\n  // NFT COntract address -> NFT TokenIID -> listing\\r\\n  mapping(address => mapping(uint256 => Listing)) s_listings;\\r\\n\\r\\n  // // NFT address -> NFT TokenIID -> Bidding\\r\\n  mapping(address => mapping(uint256 => Bidding)) s_biddings;\\r\\n\\r\\n  //Seller address -> amount earned\\r\\n  mapping(address => uint256) private s_proceeds;\\r\\n\\r\\n  //////////////////\\r\\n  // Construtors  //\\r\\n  //////////////////\\r\\n  constructor(uint256 _withdrawFees) {\\r\\n    owner = msg.sender;\\r\\n    withdrawFees = _withdrawFees;\\r\\n  }\\r\\n\\r\\n  //////////////////\\r\\n  // Modifiers    //\\r\\n  //////////////////\\r\\n  modifier notListed(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    address nftOwner\\r\\n  ) {\\r\\n    Listing memory listing = s_listings[nftAddress][tokenId];\\r\\n\\r\\n    if (listing.price > 0) {\\r\\n      revert NftMarketPlace__AlreadyListed(nftAddress, tokenId);\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n  modifier isListed(address nftAddress, uint256 tokenId) {\\r\\n    Listing memory listing = s_listings[nftAddress][tokenId];\\r\\n    if (listing.price <= 0) {\\r\\n      revert NftMarketPlace__NotListed(nftAddress, tokenId);\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n  modifier isBidding(address nftAddress, uint256 tokenId) {\\r\\n    Bidding memory bidding = s_biddings[nftAddress][tokenId];\\r\\n    if (bidding.seller == address(0)) {\\r\\n      revert NftMarketPlace__NotBidding();\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n  modifier isNftOwner(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    address spender\\r\\n  ) {\\r\\n    IERC721 nft = IERC721(nftAddress);\\r\\n    address nftOwner = nft.ownerOf(tokenId);\\r\\n    if (spender != nftOwner) {\\r\\n      revert NftMarketPlace__NotNftOwner();\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  //////////////////\\r\\n  // Main function//\\r\\n  //////////////////\\r\\n\\r\\n  /**\\r\\n   * @notice Method for listing your NFT on the marketplace\\r\\n   * @param nftAddress: Address of th NFT\\r\\n   * @param tokenId : The TokenID of the NFT\\r\\n   * @param price : sale price of the listed NFT\\r\\n   * @dev Tecnically, we could have the contract be the escrow for the NFTs but this way people can still hold their NFTs when listed.\\r\\n   */\\r\\n  function listItem(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    uint256 price\\r\\n  )\\r\\n    external\\r\\n    notListed(nftAddress, tokenId, msg.sender)\\r\\n    isNftOwner(nftAddress, tokenId, msg.sender)\\r\\n  {\\r\\n    if (price <= 0) {\\r\\n      revert NftMarketPlace__PriceMustBeAboveZero();\\r\\n    }\\r\\n    IERC721 nft = IERC721(nftAddress);\\r\\n    if (nft.getApproved(tokenId) != address(this)) {\\r\\n      revert NftMarketPlace__NotApproveForMarketPlace();\\r\\n    }\\r\\n    s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\\r\\n    emit ItemListed(msg.sender, nftAddress, tokenId, price);\\r\\n  }\\r\\n\\r\\n  function buyItem(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId\\r\\n  ) external payable nonReentrant isListed(nftAddress, tokenId) {\\r\\n    Listing memory listedItem = s_listings[nftAddress][tokenId];\\r\\n    if (msg.value < listedItem.price) {\\r\\n      revert NftMarketPlace__PriceNotMet(nftAddress, tokenId, listedItem.price);\\r\\n    }\\r\\n    s_proceeds[listedItem.seller] = s_proceeds[listedItem.seller] + msg.value;\\r\\n\\r\\n    delete (s_listings[nftAddress][tokenId]);\\r\\n    IERC721(nftAddress).safeTransferFrom(\\r\\n      listedItem.seller,\\r\\n      msg.sender,\\r\\n      tokenId\\r\\n    );\\r\\n    emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\\r\\n  }\\r\\n\\r\\n  function cancelListing(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId\\r\\n  )\\r\\n    external\\r\\n    isNftOwner(nftAddress, tokenId, msg.sender)\\r\\n    isListed(nftAddress, tokenId)\\r\\n  {\\r\\n    delete (s_listings[nftAddress][tokenId]);\\r\\n    emit ItemCanceled(msg.sender, nftAddress, tokenId);\\r\\n  }\\r\\n\\r\\n  function updateListing(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    uint256 newPrice\\r\\n  )\\r\\n    external\\r\\n    isNftOwner(nftAddress, tokenId, msg.sender)\\r\\n    isListed(nftAddress, tokenId)\\r\\n  {\\r\\n    if (newPrice <= 0) {\\r\\n      revert NftMarketPlace__PriceMustBeAboveZero();\\r\\n    }\\r\\n    s_listings[nftAddress][tokenId].price = newPrice;\\r\\n\\r\\n    emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\\r\\n  }\\r\\n\\r\\n  function withdrawProceeds() external payable nonReentrant {\\r\\n    uint256 proceeds = s_proceeds[msg.sender];\\r\\n    if (proceeds <= 0) {\\r\\n      revert NftMarketPlace__NoProceeds();\\r\\n    }\\r\\n    s_proceeds[msg.sender] = 0;\\r\\n\\r\\n    uint256 feesAmount = proceeds * withdrawFees / 100;\\r\\n    uint256 withdrawAmount = proceeds - feesAmount;\\r\\n\\r\\n    // Send fees to the Owner\\r\\n    (bool feeSucces, ) = payable(owner).call{ value: feesAmount }(\\\"\\\");\\r\\n    if (!feeSucces) {\\r\\n      revert NftMarketPlace__FeesTransferFailed();\\r\\n    }\\r\\n\\r\\n    // Send money to the User\\r\\n    (bool success, ) = payable(msg.sender).call{ value: withdrawAmount }(\\\"\\\");\\r\\n    if (!success) {\\r\\n      revert NftMarketPlace__TransferFailed();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function listBiddingItem(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    uint256 price\\r\\n  ) external isNftOwner(nftAddress, tokenId, msg.sender) {\\r\\n    IERC721 nft = IERC721(nftAddress);\\r\\n    if (nft.getApproved(tokenId) != address(this)) {\\r\\n      revert NftMarketPlace__NotApproveForMarketPlace();\\r\\n    }\\r\\n    \\r\\n    s_biddings[nftAddress][tokenId] = Bidding(msg.sender, 0x0000000000000000000000000000000000000000, price, 0, 0);\\r\\n    emit BidItemListed(msg.sender, nftAddress, tokenId, price);\\r\\n  }\\r\\n\\r\\n  function raiseBidPrice(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId,\\r\\n    uint256 price\\r\\n  )external payable nonReentrant isBidding(nftAddress, tokenId) {\\r\\n    Bidding memory biddingItem = s_biddings[nftAddress][tokenId];\\r\\n    if (price <= biddingItem.price) {\\r\\n      revert NftMarketPlace__PriceNotMet(nftAddress, tokenId, biddingItem.price);\\r\\n    }\\r\\n    if(biddingItem.startBuyTime != 0) {\\r\\n      if(block.timestamp > biddingItem.startBuyTime &&block.timestamp < biddingItem.endBuyTime ){\\r\\n        revert NftMarketPlace__BiddingTimeIsOver();\\r\\n      }\\r\\n    }\\r\\n    \\r\\n    uint256 newStartTime = block.timestamp + 300; // Add 5' the current time\\r\\n    uint256 newEndTime = newStartTime + 300; // Add 10' the current time\\r\\n    s_biddings[nftAddress][tokenId] = Bidding(biddingItem.seller, msg.sender, price, newStartTime, newEndTime);\\r\\n    emit RaiseBidPrice(msg.sender,nftAddress, tokenId, newStartTime, newEndTime, price);\\r\\n  }\\r\\n\\r\\n  function cancelBidding(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId\\r\\n  )\\r\\n    external\\r\\n    isNftOwner(nftAddress, tokenId, msg.sender)\\r\\n    isBidding(nftAddress, tokenId)\\r\\n  {\\r\\n    delete (s_biddings[nftAddress][tokenId]);\\r\\n    emit ItemCanceled(msg.sender, nftAddress, tokenId);\\r\\n  }\\r\\n\\r\\n  function buyBidItem(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId\\r\\n  ) external payable nonReentrant isBidding(nftAddress, tokenId) {\\r\\n    Bidding memory biddingItem = s_biddings[nftAddress][tokenId];\\r\\n    if(block.timestamp < biddingItem.endBuyTime || block.timestamp > biddingItem.startBuyTime ){\\r\\n      revert NftMarketPlace__BuyBiddingTimeIsNotMeet(nftAddress, tokenId, biddingItem.startBuyTime ,biddingItem.endBuyTime);\\r\\n    }\\r\\n\\r\\n    if(biddingItem.buyer != msg.sender){\\r\\n      revert NftMarketPlace__NotTheHighestBidder();\\r\\n    }\\r\\n\\r\\n    if (msg.value < biddingItem.price) {\\r\\n      revert NftMarketPlace__PriceNotMet(nftAddress, tokenId, biddingItem.price);\\r\\n    }\\r\\n\\r\\n    s_proceeds[biddingItem.seller] = s_proceeds[biddingItem.seller] + msg.value;\\r\\n    delete (s_biddings[nftAddress][tokenId]);\\r\\n    IERC721(nftAddress).safeTransferFrom(\\r\\n      biddingItem.seller,\\r\\n      msg.sender,\\r\\n      tokenId\\r\\n    );\\r\\n    emit BidItemBought(msg.sender, nftAddress, tokenId, biddingItem.price);\\r\\n  }\\r\\n  /////////////////////\\r\\n  // Getter function //\\r\\n  /////////////////////\\r\\n\\r\\n  function getListing(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId\\r\\n  ) external view returns (Listing memory) {\\r\\n    return s_listings[nftAddress][tokenId];\\r\\n  }\\r\\n\\r\\n  function getBidding(\\r\\n    address nftAddress,\\r\\n    uint256 tokenId\\r\\n  ) external view returns (Bidding memory) {\\r\\n    return s_biddings[nftAddress][tokenId];\\r\\n  }\\r\\n\\r\\n  function getProceeds(address seller) external view returns (uint256) {\\r\\n    return s_proceeds[seller];\\r\\n  }\\r\\n}\\r\\n\\r\\n//    1. `listItem`: List NFTs on the marketplace\\r\\n//    2. `buyItem`: Buy the NFTs\\r\\n//    3. `cacelItem`: Cancel a listing\\r\\n//    4. `updateListing`: Update price\\r\\n//    5. `widthrawProceeds`: Withdraw payment for my bought NFTs\\r\\n//    6. `listBiddingItem`: List the bidding item\\r\\n//    7. `raiseBidPrice`: Reaise the price \\u00f2 the bidding nft\\r\\n//    8. `cancelBidding`: Owner can cacel the bid item\\r\\n//    9. `buyBidItem`: After bidding time, hightest bidder can buy the nft\",\"keccak256\":\"0x9c67d70f50a1165f4c4698f2fcf5ecdd50535e2fdfc0029c860e43b6814462ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801562000010575f80fd5b5060405162003019380380620030198339818101604052810190620000369190620000c7565b60015f819055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555050620000f7565b5f80fd5b5f819050919050565b620000a3816200008f565b8114620000ae575f80fd5b50565b5f81519050620000c18162000098565b92915050565b5f60208284031215620000df57620000de6200008b565b5b5f620000ee84828501620000b1565b91505092915050565b612f1480620001055f395ff3fe6080604052600436106100dc575f3560e01c80638f8516921161007e578063b2ddee0611610058578063b2ddee0614610266578063b460657c1461028e578063b55cdb2a146102ca578063f772adf1146102e6576100dc565b80638f851692146102245780639038e693146102405780639f37092a1461024a576100dc565b80638059432b116100ba5780638059432b1461016e57806388700d1c1461019657806389bfd38f146101d25780638da5cb5b146101fa576100dc565b806330cfeda9146100e057806342bf87711461011c578063476343ee14610144575b5f80fd5b3480156100eb575f80fd5b5061010660048036038101906101019190612966565b61030e565b60405161011391906129a9565b60405180910390f35b348015610127575f80fd5b50610142600480360381019061013d91906129ec565b610354565b005b34801561014f575f80fd5b506101586106e6565b60405161016591906129a9565b60405180910390f35b348015610179575f80fd5b50610194600480360381019061018f9190612a2a565b6106ec565b005b3480156101a1575f80fd5b506101bc60048036038101906101b791906129ec565b610a6e565b6040516101c99190612ac5565b60405180910390f35b3480156101dd575f80fd5b506101f860048036038101906101f39190612a2a565b610b33565b005b348015610205575f80fd5b5061020e610f75565b60405161021b9190612aed565b60405180910390f35b61023e60048036038101906102399190612a2a565b610f9a565b005b6102486114e3565b005b610264600480360381019061025f91906129ec565b611741565b005b348015610271575f80fd5b5061028c600480360381019061028791906129ec565b611b47565b005b348015610299575f80fd5b506102b460048036038101906102af91906129ec565b611e1d565b6040516102c19190612b6c565b60405180910390f35b6102e460048036038101906102df91906129ec565b611f4b565b005b3480156102f1575f80fd5b5061030c60048036038101906103079190612a2a565b612545565b005b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b8181335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161039591906129a9565b602060405180830381865afa1580156103b0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103d49190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461043b576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86865f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090505f73ffffffffffffffffffffffffffffffffffffffff16815f015173ffffffffffffffffffffffffffffffffffffffff16036105c6576040517fbfc2415d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231588b6040516106d291906129a9565b60405180910390a350505050505050505050565b60025481565b8282335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161072d91906129a9565b602060405180830381865afa158015610748573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061076c9190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146107d3576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8890503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8a6040518263ffffffff1660e01b815260040161082791906129a9565b602060405180830381865afa158015610842573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108669190612b99565b73ffffffffffffffffffffffffffffffffffffffff16146108b3576040517fc845ea0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020018881526020015f81526020015f81525060045f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040155905050878973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2d14cfbfc5e07c6a5ef81fc5f2d5c8b6377e3757567c71bf55e05d345a398fbb8a604051610a5b91906129a9565b60405180910390a4505050505050505050565b610a76612884565b60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b8282335f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f01511115610c385783836040517ffa1d424f000000000000000000000000000000000000000000000000000000008152600401610c2f929190612bc4565b60405180910390fd5b8686335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610c7991906129a9565b602060405180830381865afa158015610c94573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb89190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610d1f576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8a11610d58576040517f01e6e2e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8c90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8e6040518263ffffffff1660e01b8152600401610dac91906129a9565b602060405180830381865afa158015610dc7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610deb9190612b99565b73ffffffffffffffffffffffffffffffffffffffff1614610e38576040517fc845ea0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff1681525060035f8f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8e81526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508b8d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48e604051610f5e91906129a9565b60405180910390a450505050505050505050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610fa261282e565b82825f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090505f73ffffffffffffffffffffffffffffffffffffffff16815f015173ffffffffffffffffffffffffffffffffffffffff160361112d576040517fbfc2415d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60045f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8781526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090508060400151851161129e57868682604001516040517f2425ddb300000000000000000000000000000000000000000000000000000000815260040161129593929190612beb565b60405180910390fd5b5f8160600151146112f7578060600151421180156112bf5750806080015142105b156112f6576040517fa08d087b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5f61012c426113069190612c4d565b90505f61012c826113179190612c4d565b90506040518060a00160405280845f015173ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018381526020018281525060045f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040155905050878973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9359ab34c5f349a375e3a70ae9f3128492487e49cd4793470f10dad2e25b9a7785858c6040516114c893929190612c80565b60405180910390a45050505050506114de61287b565b505050565b6114eb61282e565b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f8111611565576040517faaefe00600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f6064600254836115b89190612cb5565b6115c29190612d23565b90505f81836115d19190612d53565b90505f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360405161161990612db3565b5f6040518083038185875af1925050503d805f8114611653576040519150601f19603f3d011682016040523d82523d5f602084013e611658565b606091505b5050905080611693576040517f6d4f33ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f3373ffffffffffffffffffffffffffffffffffffffff16836040516116b890612db3565b5f6040518083038185875af1925050503d805f81146116f2576040519150601f19603f3d011682016040523d82523d5f602084013e6116f7565b606091505b5050905080611732576040517fcf0afe3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505061173f61287b565b565b61174961282e565b81815f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f01511161184c5782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401611843929190612bc4565b60405180910390fd5b5f60035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050805f0151341015611953578585825f01516040517f2425ddb300000000000000000000000000000000000000000000000000000000815260040161194a93929190612beb565b60405180910390fd5b3460055f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546119a09190612c4d565b60055f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555060035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133886040518463ffffffff1660e01b8152600401611aa193929190612dc7565b5f604051808303815f87803b158015611ab8575f80fd5b505af1158015611aca573d5f803e3d5ffd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac187845f0151604051611b2f91906129a9565b60405180910390a450505050611b4361287b565b5050565b8181335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401611b8891906129a9565b602060405180830381865afa158015611ba3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc79190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c2e576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86865f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f015111611d315782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401611d28929190612bc4565b60405180910390fd5b60035f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231588b604051611e0991906129a9565b60405180910390a350505050505050505050565b611e256128b2565b60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481525050905092915050565b611f5361282e565b81815f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090505f73ffffffffffffffffffffffffffffffffffffffff16815f015173ffffffffffffffffffffffffffffffffffffffff16036120de576040517fbfc2415d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60045f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481525050905080608001514210806122145750806060015142115b15612264578585826060015183608001516040517f80eb2a5700000000000000000000000000000000000000000000000000000000815260040161225b9493929190612dfc565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146122cd576040517fbbfae8ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015134101561231e57858582604001516040517f2425ddb300000000000000000000000000000000000000000000000000000000815260040161231593929190612beb565b60405180910390fd5b3460055f835f015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461236a9190612c4d565b60055f835f015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555060045f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e825f015133886040518463ffffffff1660e01b815260040161249d93929190612dc7565b5f604051808303815f87803b1580156124b4575f80fd5b505af11580156124c6573d5f803e3d5ffd5b505050508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdffcba3cee042fdd9e7b37465808dae6028b53d446d8acc55097cab120619df887846040015160405161252d929190612e3f565b60405180910390a35050505061254161287b565b5050565b8282335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161258691906129a9565b602060405180830381865afa1580156125a1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125c59190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461262c576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87875f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f01511161272f5782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401612726929190612bc4565b60405180910390fd5b5f8911612768576040517f01e6e2e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8860035f8d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8c81526020019081526020015f205f0181905550898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48c60405161281991906129a9565b60405180910390a45050505050505050505050565b60025f5403612872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286990612ec0565b60405180910390fd5b60025f81905550565b60015f81905550565b60405180604001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060a001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81525090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6129358261290c565b9050919050565b6129458161292b565b811461294f575f80fd5b50565b5f813590506129608161293c565b92915050565b5f6020828403121561297b5761297a612908565b5b5f61298884828501612952565b91505092915050565b5f819050919050565b6129a381612991565b82525050565b5f6020820190506129bc5f83018461299a565b92915050565b6129cb81612991565b81146129d5575f80fd5b50565b5f813590506129e6816129c2565b92915050565b5f8060408385031215612a0257612a01612908565b5b5f612a0f85828601612952565b9250506020612a20858286016129d8565b9150509250929050565b5f805f60608486031215612a4157612a40612908565b5b5f612a4e86828701612952565b9350506020612a5f868287016129d8565b9250506040612a70868287016129d8565b9150509250925092565b612a8381612991565b82525050565b612a928161292b565b82525050565b604082015f820151612aac5f850182612a7a565b506020820151612abf6020850182612a89565b50505050565b5f604082019050612ad85f830184612a98565b92915050565b612ae78161292b565b82525050565b5f602082019050612b005f830184612ade565b92915050565b60a082015f820151612b1a5f850182612a89565b506020820151612b2d6020850182612a89565b506040820151612b406040850182612a7a565b506060820151612b536060850182612a7a565b506080820151612b666080850182612a7a565b50505050565b5f60a082019050612b7f5f830184612b06565b92915050565b5f81519050612b938161293c565b92915050565b5f60208284031215612bae57612bad612908565b5b5f612bbb84828501612b85565b91505092915050565b5f604082019050612bd75f830185612ade565b612be4602083018461299a565b9392505050565b5f606082019050612bfe5f830186612ade565b612c0b602083018561299a565b612c18604083018461299a565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612c5782612991565b9150612c6283612991565b9250828201905080821115612c7a57612c79612c20565b5b92915050565b5f606082019050612c935f83018661299a565b612ca0602083018561299a565b612cad604083018461299a565b949350505050565b5f612cbf82612991565b9150612cca83612991565b9250828202612cd881612991565b91508282048414831517612cef57612cee612c20565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612d2d82612991565b9150612d3883612991565b925082612d4857612d47612cf6565b5b828204905092915050565b5f612d5d82612991565b9150612d6883612991565b9250828203905081811115612d8057612d7f612c20565b5b92915050565b5f81905092915050565b50565b5f612d9e5f83612d86565b9150612da982612d90565b5f82019050919050565b5f612dbd82612d93565b9150819050919050565b5f606082019050612dda5f830186612ade565b612de76020830185612ade565b612df4604083018461299a565b949350505050565b5f608082019050612e0f5f830187612ade565b612e1c602083018661299a565b612e29604083018561299a565b612e36606083018461299a565b95945050505050565b5f604082019050612e525f83018561299a565b612e5f602083018461299a565b9392505050565b5f82825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f612eaa601f83612e66565b9150612eb582612e76565b602082019050919050565b5f6020820190508181035f830152612ed781612e9e565b905091905056fea264697066735822122090e2d88c50e99d3df158fd81135cee2c0a0cfd2d0fbc0af06f3f3b90e286e73864736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100dc575f3560e01c80638f8516921161007e578063b2ddee0611610058578063b2ddee0614610266578063b460657c1461028e578063b55cdb2a146102ca578063f772adf1146102e6576100dc565b80638f851692146102245780639038e693146102405780639f37092a1461024a576100dc565b80638059432b116100ba5780638059432b1461016e57806388700d1c1461019657806389bfd38f146101d25780638da5cb5b146101fa576100dc565b806330cfeda9146100e057806342bf87711461011c578063476343ee14610144575b5f80fd5b3480156100eb575f80fd5b5061010660048036038101906101019190612966565b61030e565b60405161011391906129a9565b60405180910390f35b348015610127575f80fd5b50610142600480360381019061013d91906129ec565b610354565b005b34801561014f575f80fd5b506101586106e6565b60405161016591906129a9565b60405180910390f35b348015610179575f80fd5b50610194600480360381019061018f9190612a2a565b6106ec565b005b3480156101a1575f80fd5b506101bc60048036038101906101b791906129ec565b610a6e565b6040516101c99190612ac5565b60405180910390f35b3480156101dd575f80fd5b506101f860048036038101906101f39190612a2a565b610b33565b005b348015610205575f80fd5b5061020e610f75565b60405161021b9190612aed565b60405180910390f35b61023e60048036038101906102399190612a2a565b610f9a565b005b6102486114e3565b005b610264600480360381019061025f91906129ec565b611741565b005b348015610271575f80fd5b5061028c600480360381019061028791906129ec565b611b47565b005b348015610299575f80fd5b506102b460048036038101906102af91906129ec565b611e1d565b6040516102c19190612b6c565b60405180910390f35b6102e460048036038101906102df91906129ec565b611f4b565b005b3480156102f1575f80fd5b5061030c60048036038101906103079190612a2a565b612545565b005b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b8181335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161039591906129a9565b602060405180830381865afa1580156103b0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103d49190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461043b576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86865f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090505f73ffffffffffffffffffffffffffffffffffffffff16815f015173ffffffffffffffffffffffffffffffffffffffff16036105c6576040517fbfc2415d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231588b6040516106d291906129a9565b60405180910390a350505050505050505050565b60025481565b8282335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161072d91906129a9565b602060405180830381865afa158015610748573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061076c9190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146107d3576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8890503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8a6040518263ffffffff1660e01b815260040161082791906129a9565b602060405180830381865afa158015610842573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108669190612b99565b73ffffffffffffffffffffffffffffffffffffffff16146108b3576040517fc845ea0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020018881526020015f81526020015f81525060045f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040155905050878973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2d14cfbfc5e07c6a5ef81fc5f2d5c8b6377e3757567c71bf55e05d345a398fbb8a604051610a5b91906129a9565b60405180910390a4505050505050505050565b610a76612884565b60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b8282335f60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f01511115610c385783836040517ffa1d424f000000000000000000000000000000000000000000000000000000008152600401610c2f929190612bc4565b60405180910390fd5b8686335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610c7991906129a9565b602060405180830381865afa158015610c94573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb89190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610d1f576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8a11610d58576040517f01e6e2e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8c90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8e6040518263ffffffff1660e01b8152600401610dac91906129a9565b602060405180830381865afa158015610dc7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610deb9190612b99565b73ffffffffffffffffffffffffffffffffffffffff1614610e38576040517fc845ea0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff1681525060035f8f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8e81526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508b8d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48e604051610f5e91906129a9565b60405180910390a450505050505050505050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610fa261282e565b82825f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090505f73ffffffffffffffffffffffffffffffffffffffff16815f015173ffffffffffffffffffffffffffffffffffffffff160361112d576040517fbfc2415d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60045f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8781526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090508060400151851161129e57868682604001516040517f2425ddb300000000000000000000000000000000000000000000000000000000815260040161129593929190612beb565b60405180910390fd5b5f8160600151146112f7578060600151421180156112bf5750806080015142105b156112f6576040517fa08d087b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5f61012c426113069190612c4d565b90505f61012c826113179190612c4d565b90506040518060a00160405280845f015173ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018381526020018281525060045f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040155905050878973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9359ab34c5f349a375e3a70ae9f3128492487e49cd4793470f10dad2e25b9a7785858c6040516114c893929190612c80565b60405180910390a45050505050506114de61287b565b505050565b6114eb61282e565b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f8111611565576040517faaefe00600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f6064600254836115b89190612cb5565b6115c29190612d23565b90505f81836115d19190612d53565b90505f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360405161161990612db3565b5f6040518083038185875af1925050503d805f8114611653576040519150601f19603f3d011682016040523d82523d5f602084013e611658565b606091505b5050905080611693576040517f6d4f33ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f3373ffffffffffffffffffffffffffffffffffffffff16836040516116b890612db3565b5f6040518083038185875af1925050503d805f81146116f2576040519150601f19603f3d011682016040523d82523d5f602084013e6116f7565b606091505b5050905080611732576040517fcf0afe3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505061173f61287b565b565b61174961282e565b81815f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f01511161184c5782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401611843929190612bc4565b60405180910390fd5b5f60035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050805f0151341015611953578585825f01516040517f2425ddb300000000000000000000000000000000000000000000000000000000815260040161194a93929190612beb565b60405180910390fd5b3460055f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546119a09190612c4d565b60055f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555060035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133886040518463ffffffff1660e01b8152600401611aa193929190612dc7565b5f604051808303815f87803b158015611ab8575f80fd5b505af1158015611aca573d5f803e3d5ffd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac187845f0151604051611b2f91906129a9565b60405180910390a450505050611b4361287b565b5050565b8181335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401611b8891906129a9565b602060405180830381865afa158015611ba3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc79190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c2e576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86865f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f015111611d315782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401611d28929190612bc4565b60405180910390fd5b60035f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8a81526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231588b604051611e0991906129a9565b60405180910390a350505050505050505050565b611e256128b2565b60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481525050905092915050565b611f5361282e565b81815f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505090505f73ffffffffffffffffffffffffffffffffffffffff16815f015173ffffffffffffffffffffffffffffffffffffffff16036120de576040517fbfc2415d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60045f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481525050905080608001514210806122145750806060015142115b15612264578585826060015183608001516040517f80eb2a5700000000000000000000000000000000000000000000000000000000815260040161225b9493929190612dfc565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146122cd576040517fbbfae8ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015134101561231e57858582604001516040517f2425ddb300000000000000000000000000000000000000000000000000000000815260040161231593929190612beb565b60405180910390fd5b3460055f835f015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461236a9190612c4d565b60055f835f015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555060045f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8681526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e825f015133886040518463ffffffff1660e01b815260040161249d93929190612dc7565b5f604051808303815f87803b1580156124b4575f80fd5b505af11580156124c6573d5f803e3d5ffd5b505050508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdffcba3cee042fdd9e7b37465808dae6028b53d446d8acc55097cab120619df887846040015160405161252d929190612e3f565b60405180910390a35050505061254161287b565b5050565b8282335f8390505f8173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161258691906129a9565b602060405180830381865afa1580156125a1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125c59190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461262c576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87875f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f206040518060400160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090505f815f01511161272f5782826040517f2e650be0000000000000000000000000000000000000000000000000000000008152600401612726929190612bc4565b60405180910390fd5b5f8911612768576040517f01e6e2e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8860035f8d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8c81526020019081526020015f205f0181905550898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48c60405161281991906129a9565b60405180910390a45050505050505050505050565b60025f5403612872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286990612ec0565b60405180910390fd5b60025f81905550565b60015f81905550565b60405180604001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060a001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81525090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6129358261290c565b9050919050565b6129458161292b565b811461294f575f80fd5b50565b5f813590506129608161293c565b92915050565b5f6020828403121561297b5761297a612908565b5b5f61298884828501612952565b91505092915050565b5f819050919050565b6129a381612991565b82525050565b5f6020820190506129bc5f83018461299a565b92915050565b6129cb81612991565b81146129d5575f80fd5b50565b5f813590506129e6816129c2565b92915050565b5f8060408385031215612a0257612a01612908565b5b5f612a0f85828601612952565b9250506020612a20858286016129d8565b9150509250929050565b5f805f60608486031215612a4157612a40612908565b5b5f612a4e86828701612952565b9350506020612a5f868287016129d8565b9250506040612a70868287016129d8565b9150509250925092565b612a8381612991565b82525050565b612a928161292b565b82525050565b604082015f820151612aac5f850182612a7a565b506020820151612abf6020850182612a89565b50505050565b5f604082019050612ad85f830184612a98565b92915050565b612ae78161292b565b82525050565b5f602082019050612b005f830184612ade565b92915050565b60a082015f820151612b1a5f850182612a89565b506020820151612b2d6020850182612a89565b506040820151612b406040850182612a7a565b506060820151612b536060850182612a7a565b506080820151612b666080850182612a7a565b50505050565b5f60a082019050612b7f5f830184612b06565b92915050565b5f81519050612b938161293c565b92915050565b5f60208284031215612bae57612bad612908565b5b5f612bbb84828501612b85565b91505092915050565b5f604082019050612bd75f830185612ade565b612be4602083018461299a565b9392505050565b5f606082019050612bfe5f830186612ade565b612c0b602083018561299a565b612c18604083018461299a565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612c5782612991565b9150612c6283612991565b9250828201905080821115612c7a57612c79612c20565b5b92915050565b5f606082019050612c935f83018661299a565b612ca0602083018561299a565b612cad604083018461299a565b949350505050565b5f612cbf82612991565b9150612cca83612991565b9250828202612cd881612991565b91508282048414831517612cef57612cee612c20565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612d2d82612991565b9150612d3883612991565b925082612d4857612d47612cf6565b5b828204905092915050565b5f612d5d82612991565b9150612d6883612991565b9250828203905081811115612d8057612d7f612c20565b5b92915050565b5f81905092915050565b50565b5f612d9e5f83612d86565b9150612da982612d90565b5f82019050919050565b5f612dbd82612d93565b9150819050919050565b5f606082019050612dda5f830186612ade565b612de76020830185612ade565b612df4604083018461299a565b949350505050565b5f608082019050612e0f5f830187612ade565b612e1c602083018661299a565b612e29604083018561299a565b612e36606083018461299a565b95945050505050565b5f604082019050612e525f83018561299a565b612e5f602083018461299a565b9392505050565b5f82825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f612eaa601f83612e66565b9150612eb582612e76565b602082019050919050565b5f6020820190508181035f830152612ed781612e9e565b905091905056fea264697066735822122090e2d88c50e99d3df158fd81135cee2c0a0cfd2d0fbc0af06f3f3b90e286e73864736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "listItem(address,uint256,uint256)": {
        "details": "Tecnically, we could have the contract be the escrow for the NFTs but this way people can still hold their NFTs when listed.",
        "params": {
          "nftAddress": ": Address of th NFT",
          "price": ": sale price of the listed NFT",
          "tokenId": ": The TokenID of the NFT"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "listItem(address,uint256,uint256)": {
        "notice": "Method for listing your NFT on the marketplace"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 326,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 328,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "withdrawFees",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 335,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "s_listings",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)251_storage))"
      },
      {
        "astId": 342,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "s_biddings",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bidding)262_storage))"
      },
      {
        "astId": 346,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Bidding)262_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketPlace.Bidding))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Bidding)262_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)251_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketPlace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)251_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bidding)262_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketPlace.Bidding)",
        "numberOfBytes": "32",
        "value": "t_struct(Bidding)262_storage"
      },
      "t_mapping(t_uint256,t_struct(Listing)251_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketPlace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)251_storage"
      },
      "t_struct(Bidding)262_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketPlace.Bidding",
        "members": [
          {
            "astId": 253,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 255,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "buyer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 257,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 259,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "startBuyTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 261,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "endBuyTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Listing)251_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketPlace.Listing",
        "members": [
          {
            "astId": 248,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 250,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}